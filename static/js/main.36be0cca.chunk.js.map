{"version":3,"sources":["component/Display.js","component/Button.js","component/Keypad.js","App.js","serviceWorker.js","index.js"],"names":["Display","props","className","previous","current","Button","onClick","action","text","Keypad","onButtonClick","App","useState","setPrevious","setCurrent","currentValue","setCurrentValue","previousValue","setPreviousValue","operation","setOperation","lastKeyStrokeIsEqual","setLastKeyStrokeIsEqual","lastKeyStrokeIsOperation","setLastkeyStrokeIsOperation","currentDecimalPosition","setCurrentDecimalPosition","handleNumberClick","resetCurrentValue","resetState","console","log","updateCurrent","decimalClicked","handleDelete","length","slice","handleOperationClicked","calculate","expression","value","handleEqualClicked","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.36be0cca.chunk.js","sourcesContent":["import React from 'react'\nimport propTypes from 'prop-types'\n\nconst Display = (props) => (\n  <div className=\"output\">\n    <div className=\"previous-operand\">{props.previous}</div>\n    <div className=\"current-operand\">{props.current}</div>\n  </div>\n)\nDisplay.propTypes = {\n  previous: propTypes.string.isRequired,\n  current: propTypes.string.isRequired,\n}\n\nexport default Display\n","import React from 'react';\nimport propTypes from 'prop-types';\n\nconst Button = props => (\n  <button\n    className={props.className ? props.className : \"\"}\n    onClick={() => props.onClick(props.action, props.text)}\n  >\n    {props.text}\n  </button>\n);\nButton.propTypes = {\n  className: propTypes.string,\n  text: propTypes.string.isRequired,\n  action: propTypes.string.isRequired,\n  onClick: propTypes.func.isRequired\n};\nexport default Button;","import React from 'react'\nimport Button from './Button'\nimport propTypes from 'prop-types'\n\nconst Keypad = (props) => (\n  <>\n    <Button\n      onClick={props.onButtonClick}\n      className=\"span-two\"\n      action=\"clear\"\n      text=\"AC\"\n    ></Button>\n    <Button onClick={props.onButtonClick} action=\"delete\" text=\"DEL\"></Button>\n    <Button onClick={props.onButtonClick} action=\"operation\" text=\"รท\"></Button>\n    <Button onClick={props.onButtonClick} action=\"number\" text=\"1\"></Button>\n    <Button onClick={props.onButtonClick} action=\"number\" text=\"2\"></Button>\n    <Button onClick={props.onButtonClick} action=\"number\" text=\"3\"></Button>\n    <Button onClick={props.onButtonClick} action=\"operation\" text=\"*\"></Button>\n    <Button onClick={props.onButtonClick} action=\"number\" text=\"4\"></Button>\n    <Button onClick={props.onButtonClick} action=\"number\" text=\"5\"></Button>\n    <Button onClick={props.onButtonClick} action=\"number\" text=\"6\"></Button>\n    <Button onClick={props.onButtonClick} action=\"operation\" text=\"+\"></Button>\n    <Button onClick={props.onButtonClick} action=\"number\" text=\"7\"></Button>\n    <Button onClick={props.onButtonClick} action=\"number\" text=\"8\"></Button>\n    <Button onClick={props.onButtonClick} action=\"number\" text=\"9\"></Button>\n    <Button onClick={props.onButtonClick} action=\"operation\" text=\"-\"></Button>\n    <Button onClick={props.onButtonClick} action=\"decimal\" text=\".\"></Button>\n    <Button onClick={props.onButtonClick} action=\"number\" text=\"0\"></Button>\n    <Button\n      onClick={props.onButtonClick}\n      action=\"equal\"\n      className=\"span-two\"\n      text=\"=\"\n    ></Button>\n  </>\n)\nKeypad.propTypes = {\n  onButtonClick: propTypes.func.isRequired,\n}\n\nexport default Keypad\n","import React, { useState } from 'react'\nimport Display from './component/Display'\nimport Keypad from './component/Keypad'\n\nfunction App() {\n  const [previous, setPrevious] = useState('')\n  const [current, setCurrent] = useState('0')\n  const [currentValue, setCurrentValue] = useState(0)\n  const [previousValue, setPreviousValue] = useState(0)\n  const [operation, setOperation] = useState('')\n  const [lastKeyStrokeIsEqual, setLastKeyStrokeIsEqual] = useState(false)\n  const [lastKeyStrokeIsOperation, setLastkeyStrokeIsOperation] = useState(\n    false,\n  )\n  const [currentDecimalPosition, setCurrentDecimalPosition] = useState(-1)\n\n  const onButtonClick = (action, text) => {\n    switch (action) {\n      case 'number':\n        handleNumberClick(text)\n        break\n      case 'decimal':\n        decimalClicked()\n        break\n      case 'delete':\n        handleDelete()\n        break\n      case 'operation':\n        handleOperationClicked(text)\n        break\n      case 'clear':\n        resetState()\n        break\n      case 'equal':\n        handleEqualClicked()\n        break\n    }\n  }\n\n  const handleNumberClick = (text) => {\n    let resetCurrentValue = false\n    if (lastKeyStrokeIsOperation) {\n      resetCurrentValue = true\n      setLastkeyStrokeIsOperation(false)\n    } else if (lastKeyStrokeIsEqual) {\n      resetCurrentValue = true\n      setLastKeyStrokeIsEqual(false)\n      resetState()\n    }\n    console.log(currentValue)\n    if (\n      (currentValue === 0 && currentDecimalPosition === -1) ||\n      resetCurrentValue\n    ) {\n      updateCurrent(text)\n    } else {\n      updateCurrent(current + text)\n      if (currentDecimalPosition > -1) {\n        setCurrentDecimalPosition(currentDecimalPosition + 1)\n      }\n    }\n  }\n  const decimalClicked = () => {\n    if (currentDecimalPosition === -1) {\n      setCurrentDecimalPosition(0)\n      updateCurrent(current + '.')\n    }\n  }\n\n  const handleDelete = () => {\n    if (lastKeyStrokeIsOperation || lastKeyStrokeIsEqual) return\n    if (current.length === 1) {\n      updateCurrent('0')\n    }\n    setCurrent(current.slice(0, -1))\n    setCurrentValue(current - 0)\n  }\n\n  const handleOperationClicked = (text) => {\n    if (operation && !lastKeyStrokeIsOperation && !lastKeyStrokeIsEqual) {\n      calculate()\n    }\n    setOperation(text)\n    setPreviousValue(currentValue)\n    setPrevious(current + text)\n    setLastKeyStrokeIsEqual(false)\n    setLastkeyStrokeIsOperation(true)\n  }\n  const calculate = () => {\n    switch (operation) {\n      case '+':\n        updateCurrent(previousValue + currentValue + '')\n        break\n      case '-':\n        updateCurrent(previousValue - currentValue + '')\n        break\n      case '*':\n        updateCurrent(previousValue * currentValue + '')\n        break\n      case 'รท':\n        if (current === 0) {\n          let expression = previous + current\n          resetState()\n          setPrevious(expression)\n          setCurrent('BOOM!')\n          return\n        } else {\n          updateCurrent(previousValue / currentValue + '')\n          break\n        }\n    }\n    setPrevious(previous + current)\n    setLastkeyStrokeIsOperation(false)\n    setLastKeyStrokeIsEqual(true)\n  }\n  const updateCurrent = (value) => {\n    setCurrent(value)\n    console.log(value - 0)\n    setCurrentValue(value - 0)\n    console.log(currentValue)\n  }\n  const resetState = function () {\n    setPrevious('')\n    setPreviousValue(0)\n    updateCurrent('0')\n    setOperation('')\n    setLastKeyStrokeIsEqual(false)\n    setLastkeyStrokeIsOperation(false)\n    setCurrentDecimalPosition(-1)\n  }\n\n  const handleEqualClicked = () => {\n    calculate()\n  }\n\n  return (\n    <div className=\"calculator-grid\">\n      <Display previous={previous} current={current} />\n      <Keypad onButtonClick={onButtonClick} />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}